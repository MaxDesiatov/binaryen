import CBinaryen

public extension BinaryenOp {
  static var clzInt32: Self { BinaryenClzInt32() }
  static var ctzInt32: Self { BinaryenCtzInt32() }
  static var popcntInt32: Self { BinaryenPopcntInt32() }
  static var negFloat32: Self { BinaryenNegFloat32() }
  static var absFloat32: Self { BinaryenAbsFloat32() }
  static var ceilFloat32: Self { BinaryenCeilFloat32() }
  static var floorFloat32: Self { BinaryenFloorFloat32() }
  static var truncFloat32: Self { BinaryenTruncFloat32() }
  static var nearestFloat32: Self { BinaryenNearestFloat32() }
  static var sqrtFloat32: Self { BinaryenSqrtFloat32() }
  static var eqZInt32: Self { BinaryenEqZInt32() }
  static var clzInt64: Self { BinaryenClzInt64() }
  static var ctzInt64: Self { BinaryenCtzInt64() }
  static var popcntInt64: Self { BinaryenPopcntInt64() }
  static var negFloat64: Self { BinaryenNegFloat64() }
  static var absFloat64: Self { BinaryenAbsFloat64() }
  static var ceilFloat64: Self { BinaryenCeilFloat64() }
  static var floorFloat64: Self { BinaryenFloorFloat64() }
  static var truncFloat64: Self { BinaryenTruncFloat64() }
  static var nearestFloat64: Self { BinaryenNearestFloat64() }
  static var sqrtFloat64: Self { BinaryenSqrtFloat64() }
  static var eqZInt64: Self { BinaryenEqZInt64() }
  static var extendSInt32: Self { BinaryenExtendSInt32() }
  static var extendUInt32: Self { BinaryenExtendUInt32() }
  static var wrapInt64: Self { BinaryenWrapInt64() }
  static var truncSFloat32ToInt32: Self { BinaryenTruncSFloat32ToInt32() }
  static var truncSFloat32ToInt64: Self { BinaryenTruncSFloat32ToInt64() }
  static var truncUFloat32ToInt32: Self { BinaryenTruncUFloat32ToInt32() }
  static var truncUFloat32ToInt64: Self { BinaryenTruncUFloat32ToInt64() }
  static var truncSFloat64ToInt32: Self { BinaryenTruncSFloat64ToInt32() }
  static var truncSFloat64ToInt64: Self { BinaryenTruncSFloat64ToInt64() }
  static var truncUFloat64ToInt32: Self { BinaryenTruncUFloat64ToInt32() }
  static var truncUFloat64ToInt64: Self { BinaryenTruncUFloat64ToInt64() }
  static var reinterpretFloat32: Self { BinaryenReinterpretFloat32() }
  static var reinterpretFloat64: Self { BinaryenReinterpretFloat64() }
  static var extendS8Int32: Self { BinaryenExtendS8Int32() }
  static var extendS16Int32: Self { BinaryenExtendS16Int32() }
  static var extendS8Int64: Self { BinaryenExtendS8Int64() }
  static var extendS16Int64: Self { BinaryenExtendS16Int64() }
  static var extendS32Int64: Self { BinaryenExtendS32Int64() }
  static var convertSInt32ToFloat32: Self { BinaryenConvertSInt32ToFloat32() }
  static var convertSInt32ToFloat64: Self { BinaryenConvertSInt32ToFloat64() }
  static var convertUInt32ToFloat32: Self { BinaryenConvertUInt32ToFloat32() }
  static var convertUInt32ToFloat64: Self { BinaryenConvertUInt32ToFloat64() }
  static var convertSInt64ToFloat32: Self { BinaryenConvertSInt64ToFloat32() }
  static var convertSInt64ToFloat64: Self { BinaryenConvertSInt64ToFloat64() }
  static var convertUInt64ToFloat32: Self { BinaryenConvertUInt64ToFloat32() }
  static var convertUInt64ToFloat64: Self { BinaryenConvertUInt64ToFloat64() }
  static var promoteFloat32: Self { BinaryenPromoteFloat32() }
  static var demoteFloat64: Self { BinaryenDemoteFloat64() }
  static var reinterpretInt32: Self { BinaryenReinterpretInt32() }
  static var reinterpretInt64: Self { BinaryenReinterpretInt64() }
  static var addInt32: Self { BinaryenAddInt32() }
  static var subInt32: Self { BinaryenSubInt32() }
  static var mulInt32: Self { BinaryenMulInt32() }
  static var divSInt32: Self { BinaryenDivSInt32() }
  static var divUInt32: Self { BinaryenDivUInt32() }
  static var remSInt32: Self { BinaryenRemSInt32() }
  static var remUInt32: Self { BinaryenRemUInt32() }
  static var andInt32: Self { BinaryenAndInt32() }
  static var orInt32: Self { BinaryenOrInt32() }
  static var xorInt32: Self { BinaryenXorInt32() }
  static var shlInt32: Self { BinaryenShlInt32() }
  static var shrUInt32: Self { BinaryenShrUInt32() }
  static var shrSInt32: Self { BinaryenShrSInt32() }
  static var rotLInt32: Self { BinaryenRotLInt32() }
  static var rotRInt32: Self { BinaryenRotRInt32() }
  static var eqInt32: Self { BinaryenEqInt32() }
  static var neInt32: Self { BinaryenNeInt32() }
  static var ltSInt32: Self { BinaryenLtSInt32() }
  static var ltUInt32: Self { BinaryenLtUInt32() }
  static var leSInt32: Self { BinaryenLeSInt32() }
  static var leUInt32: Self { BinaryenLeUInt32() }
  static var gtSInt32: Self { BinaryenGtSInt32() }
  static var gtUInt32: Self { BinaryenGtUInt32() }
  static var geSInt32: Self { BinaryenGeSInt32() }
  static var geUInt32: Self { BinaryenGeUInt32() }
  static var addInt64: Self { BinaryenAddInt64() }
  static var subInt64: Self { BinaryenSubInt64() }
  static var mulInt64: Self { BinaryenMulInt64() }
  static var divSInt64: Self { BinaryenDivSInt64() }
  static var divUInt64: Self { BinaryenDivUInt64() }
  static var remSInt64: Self { BinaryenRemSInt64() }
  static var remUInt64: Self { BinaryenRemUInt64() }
  static var andInt64: Self { BinaryenAndInt64() }
  static var orInt64: Self { BinaryenOrInt64() }
  static var xorInt64: Self { BinaryenXorInt64() }
  static var shlInt64: Self { BinaryenShlInt64() }
  static var shrUInt64: Self { BinaryenShrUInt64() }
  static var shrSInt64: Self { BinaryenShrSInt64() }
  static var rotLInt64: Self { BinaryenRotLInt64() }
  static var rotRInt64: Self { BinaryenRotRInt64() }
  static var eqInt64: Self { BinaryenEqInt64() }
  static var neInt64: Self { BinaryenNeInt64() }
  static var ltSInt64: Self { BinaryenLtSInt64() }
  static var ltUInt64: Self { BinaryenLtUInt64() }
  static var leSInt64: Self { BinaryenLeSInt64() }
  static var leUInt64: Self { BinaryenLeUInt64() }
  static var gtSInt64: Self { BinaryenGtSInt64() }
  static var gtUInt64: Self { BinaryenGtUInt64() }
  static var geSInt64: Self { BinaryenGeSInt64() }
  static var geUInt64: Self { BinaryenGeUInt64() }
  static var addFloat32: Self { BinaryenAddFloat32() }
  static var subFloat32: Self { BinaryenSubFloat32() }
  static var mulFloat32: Self { BinaryenMulFloat32() }
  static var divFloat32: Self { BinaryenDivFloat32() }
  static var copySignFloat32: Self { BinaryenCopySignFloat32() }
  static var minFloat32: Self { BinaryenMinFloat32() }
  static var maxFloat32: Self { BinaryenMaxFloat32() }
  static var eqFloat32: Self { BinaryenEqFloat32() }
  static var neFloat32: Self { BinaryenNeFloat32() }
  static var ltFloat32: Self { BinaryenLtFloat32() }
  static var leFloat32: Self { BinaryenLeFloat32() }
  static var gtFloat32: Self { BinaryenGtFloat32() }
  static var geFloat32: Self { BinaryenGeFloat32() }
  static var addFloat64: Self { BinaryenAddFloat64() }
  static var subFloat64: Self { BinaryenSubFloat64() }
  static var mulFloat64: Self { BinaryenMulFloat64() }
  static var divFloat64: Self { BinaryenDivFloat64() }
  static var copySignFloat64: Self { BinaryenCopySignFloat64() }
  static var minFloat64: Self { BinaryenMinFloat64() }
  static var maxFloat64: Self { BinaryenMaxFloat64() }
  static var eqFloat64: Self { BinaryenEqFloat64() }
  static var neFloat64: Self { BinaryenNeFloat64() }
  static var ltFloat64: Self { BinaryenLtFloat64() }
  static var leFloat64: Self { BinaryenLeFloat64() }
  static var gtFloat64: Self { BinaryenGtFloat64() }
  static var geFloat64: Self { BinaryenGeFloat64() }
  static var atomicRMWAdd: Self { BinaryenAtomicRMWAdd() }
  static var atomicRMWSub: Self { BinaryenAtomicRMWSub() }
  static var atomicRMWAnd: Self { BinaryenAtomicRMWAnd() }
  static var atomicRMWOr: Self { BinaryenAtomicRMWOr() }
  static var atomicRMWXor: Self { BinaryenAtomicRMWXor() }
  static var atomicRMWXchg: Self { BinaryenAtomicRMWXchg() }
  static var truncSatSFloat32ToInt32: Self { BinaryenTruncSatSFloat32ToInt32() }
  static var truncSatSFloat32ToInt64: Self { BinaryenTruncSatSFloat32ToInt64() }
  static var truncSatUFloat32ToInt32: Self { BinaryenTruncSatUFloat32ToInt32() }
  static var truncSatUFloat32ToInt64: Self { BinaryenTruncSatUFloat32ToInt64() }
  static var truncSatSFloat64ToInt32: Self { BinaryenTruncSatSFloat64ToInt32() }
  static var truncSatSFloat64ToInt64: Self { BinaryenTruncSatSFloat64ToInt64() }
  static var truncSatUFloat64ToInt32: Self { BinaryenTruncSatUFloat64ToInt32() }
  static var truncSatUFloat64ToInt64: Self { BinaryenTruncSatUFloat64ToInt64() }
  static var splatVecI8x16: Self { BinaryenSplatVecI8x16() }
  static var extractLaneSVecI8x16: Self { BinaryenExtractLaneSVecI8x16() }
  static var extractLaneUVecI8x16: Self { BinaryenExtractLaneUVecI8x16() }
  static var replaceLaneVecI8x16: Self { BinaryenReplaceLaneVecI8x16() }
  static var splatVecI16x8: Self { BinaryenSplatVecI16x8() }
  static var extractLaneSVecI16x8: Self { BinaryenExtractLaneSVecI16x8() }
  static var extractLaneUVecI16x8: Self { BinaryenExtractLaneUVecI16x8() }
  static var replaceLaneVecI16x8: Self { BinaryenReplaceLaneVecI16x8() }
  static var splatVecI32x4: Self { BinaryenSplatVecI32x4() }
  static var extractLaneVecI32x4: Self { BinaryenExtractLaneVecI32x4() }
  static var replaceLaneVecI32x4: Self { BinaryenReplaceLaneVecI32x4() }
  static var splatVecI64x2: Self { BinaryenSplatVecI64x2() }
  static var extractLaneVecI64x2: Self { BinaryenExtractLaneVecI64x2() }
  static var replaceLaneVecI64x2: Self { BinaryenReplaceLaneVecI64x2() }
  static var splatVecF32x4: Self { BinaryenSplatVecF32x4() }
  static var extractLaneVecF32x4: Self { BinaryenExtractLaneVecF32x4() }
  static var replaceLaneVecF32x4: Self { BinaryenReplaceLaneVecF32x4() }
  static var splatVecF64x2: Self { BinaryenSplatVecF64x2() }
  static var extractLaneVecF64x2: Self { BinaryenExtractLaneVecF64x2() }
  static var replaceLaneVecF64x2: Self { BinaryenReplaceLaneVecF64x2() }
  static var eqVecI8x16: Self { BinaryenEqVecI8x16() }
  static var neVecI8x16: Self { BinaryenNeVecI8x16() }
  static var ltSVecI8x16: Self { BinaryenLtSVecI8x16() }
  static var ltUVecI8x16: Self { BinaryenLtUVecI8x16() }
  static var gtSVecI8x16: Self { BinaryenGtSVecI8x16() }
  static var gtUVecI8x16: Self { BinaryenGtUVecI8x16() }
  static var leSVecI8x16: Self { BinaryenLeSVecI8x16() }
  static var leUVecI8x16: Self { BinaryenLeUVecI8x16() }
  static var geSVecI8x16: Self { BinaryenGeSVecI8x16() }
  static var geUVecI8x16: Self { BinaryenGeUVecI8x16() }
  static var eqVecI16x8: Self { BinaryenEqVecI16x8() }
  static var neVecI16x8: Self { BinaryenNeVecI16x8() }
  static var ltSVecI16x8: Self { BinaryenLtSVecI16x8() }
  static var ltUVecI16x8: Self { BinaryenLtUVecI16x8() }
  static var gtSVecI16x8: Self { BinaryenGtSVecI16x8() }
  static var gtUVecI16x8: Self { BinaryenGtUVecI16x8() }
  static var leSVecI16x8: Self { BinaryenLeSVecI16x8() }
  static var leUVecI16x8: Self { BinaryenLeUVecI16x8() }
  static var geSVecI16x8: Self { BinaryenGeSVecI16x8() }
  static var geUVecI16x8: Self { BinaryenGeUVecI16x8() }
  static var eqVecI32x4: Self { BinaryenEqVecI32x4() }
  static var neVecI32x4: Self { BinaryenNeVecI32x4() }
  static var ltSVecI32x4: Self { BinaryenLtSVecI32x4() }
  static var ltUVecI32x4: Self { BinaryenLtUVecI32x4() }
  static var gtSVecI32x4: Self { BinaryenGtSVecI32x4() }
  static var gtUVecI32x4: Self { BinaryenGtUVecI32x4() }
  static var leSVecI32x4: Self { BinaryenLeSVecI32x4() }
  static var leUVecI32x4: Self { BinaryenLeUVecI32x4() }
  static var geSVecI32x4: Self { BinaryenGeSVecI32x4() }
  static var geUVecI32x4: Self { BinaryenGeUVecI32x4() }
  static var eqVecF32x4: Self { BinaryenEqVecF32x4() }
  static var neVecF32x4: Self { BinaryenNeVecF32x4() }
  static var ltVecF32x4: Self { BinaryenLtVecF32x4() }
  static var gtVecF32x4: Self { BinaryenGtVecF32x4() }
  static var leVecF32x4: Self { BinaryenLeVecF32x4() }
  static var geVecF32x4: Self { BinaryenGeVecF32x4() }
  static var eqVecF64x2: Self { BinaryenEqVecF64x2() }
  static var neVecF64x2: Self { BinaryenNeVecF64x2() }
  static var ltVecF64x2: Self { BinaryenLtVecF64x2() }
  static var gtVecF64x2: Self { BinaryenGtVecF64x2() }
  static var leVecF64x2: Self { BinaryenLeVecF64x2() }
  static var geVecF64x2: Self { BinaryenGeVecF64x2() }
  static var notVec128: Self { BinaryenNotVec128() }
  static var andVec128: Self { BinaryenAndVec128() }
  static var orVec128: Self { BinaryenOrVec128() }
  static var xorVec128: Self { BinaryenXorVec128() }
  static var andNotVec128: Self { BinaryenAndNotVec128() }
  static var bitselectVec128: Self { BinaryenBitselectVec128() }
  static var absVecI8x16: Self { BinaryenAbsVecI8x16() }
  static var negVecI8x16: Self { BinaryenNegVecI8x16() }
  static var anyTrueVecI8x16: Self { BinaryenAnyTrueVecI8x16() }
  static var allTrueVecI8x16: Self { BinaryenAllTrueVecI8x16() }
  static var bitmaskVecI8x16: Self { BinaryenBitmaskVecI8x16() }
  static var shlVecI8x16: Self { BinaryenShlVecI8x16() }
  static var shrSVecI8x16: Self { BinaryenShrSVecI8x16() }
  static var shrUVecI8x16: Self { BinaryenShrUVecI8x16() }
  static var addVecI8x16: Self { BinaryenAddVecI8x16() }
  static var addSatSVecI8x16: Self { BinaryenAddSatSVecI8x16() }
  static var addSatUVecI8x16: Self { BinaryenAddSatUVecI8x16() }
  static var subVecI8x16: Self { BinaryenSubVecI8x16() }
  static var subSatSVecI8x16: Self { BinaryenSubSatSVecI8x16() }
  static var subSatUVecI8x16: Self { BinaryenSubSatUVecI8x16() }
  static var mulVecI8x16: Self { BinaryenMulVecI8x16() }
  static var minSVecI8x16: Self { BinaryenMinSVecI8x16() }
  static var minUVecI8x16: Self { BinaryenMinUVecI8x16() }
  static var maxSVecI8x16: Self { BinaryenMaxSVecI8x16() }
  static var maxUVecI8x16: Self { BinaryenMaxUVecI8x16() }
  static var avgrUVecI8x16: Self { BinaryenAvgrUVecI8x16() }
  static var absVecI16x8: Self { BinaryenAbsVecI16x8() }
  static var negVecI16x8: Self { BinaryenNegVecI16x8() }
  static var anyTrueVecI16x8: Self { BinaryenAnyTrueVecI16x8() }
  static var allTrueVecI16x8: Self { BinaryenAllTrueVecI16x8() }
  static var bitmaskVecI16x8: Self { BinaryenBitmaskVecI16x8() }
  static var shlVecI16x8: Self { BinaryenShlVecI16x8() }
  static var shrSVecI16x8: Self { BinaryenShrSVecI16x8() }
  static var shrUVecI16x8: Self { BinaryenShrUVecI16x8() }
  static var addVecI16x8: Self { BinaryenAddVecI16x8() }
  static var addSatSVecI16x8: Self { BinaryenAddSatSVecI16x8() }
  static var addSatUVecI16x8: Self { BinaryenAddSatUVecI16x8() }
  static var subVecI16x8: Self { BinaryenSubVecI16x8() }
  static var subSatSVecI16x8: Self { BinaryenSubSatSVecI16x8() }
  static var subSatUVecI16x8: Self { BinaryenSubSatUVecI16x8() }
  static var mulVecI16x8: Self { BinaryenMulVecI16x8() }
  static var minSVecI16x8: Self { BinaryenMinSVecI16x8() }
  static var minUVecI16x8: Self { BinaryenMinUVecI16x8() }
  static var maxSVecI16x8: Self { BinaryenMaxSVecI16x8() }
  static var maxUVecI16x8: Self { BinaryenMaxUVecI16x8() }
  static var avgrUVecI16x8: Self { BinaryenAvgrUVecI16x8() }
  static var absVecI32x4: Self { BinaryenAbsVecI32x4() }
  static var negVecI32x4: Self { BinaryenNegVecI32x4() }
  static var anyTrueVecI32x4: Self { BinaryenAnyTrueVecI32x4() }
  static var allTrueVecI32x4: Self { BinaryenAllTrueVecI32x4() }
  static var bitmaskVecI32x4: Self { BinaryenBitmaskVecI32x4() }
  static var shlVecI32x4: Self { BinaryenShlVecI32x4() }
  static var shrSVecI32x4: Self { BinaryenShrSVecI32x4() }
  static var shrUVecI32x4: Self { BinaryenShrUVecI32x4() }
  static var addVecI32x4: Self { BinaryenAddVecI32x4() }
  static var subVecI32x4: Self { BinaryenSubVecI32x4() }
  static var mulVecI32x4: Self { BinaryenMulVecI32x4() }
  static var minSVecI32x4: Self { BinaryenMinSVecI32x4() }
  static var minUVecI32x4: Self { BinaryenMinUVecI32x4() }
  static var maxSVecI32x4: Self { BinaryenMaxSVecI32x4() }
  static var maxUVecI32x4: Self { BinaryenMaxUVecI32x4() }
  static var dotSVecI16x8ToVecI32x4: Self { BinaryenDotSVecI16x8ToVecI32x4() }
  static var negVecI64x2: Self { BinaryenNegVecI64x2() }
  static var anyTrueVecI64x2: Self { BinaryenAnyTrueVecI64x2() }
  static var allTrueVecI64x2: Self { BinaryenAllTrueVecI64x2() }
  static var shlVecI64x2: Self { BinaryenShlVecI64x2() }
  static var shrSVecI64x2: Self { BinaryenShrSVecI64x2() }
  static var shrUVecI64x2: Self { BinaryenShrUVecI64x2() }
  static var addVecI64x2: Self { BinaryenAddVecI64x2() }
  static var subVecI64x2: Self { BinaryenSubVecI64x2() }
  static var mulVecI64x2: Self { BinaryenMulVecI64x2() }
  static var absVecF32x4: Self { BinaryenAbsVecF32x4() }
  static var negVecF32x4: Self { BinaryenNegVecF32x4() }
  static var sqrtVecF32x4: Self { BinaryenSqrtVecF32x4() }
  static var qFMAVecF32x4: Self { BinaryenQFMAVecF32x4() }
  static var qFMSVecF32x4: Self { BinaryenQFMSVecF32x4() }
  static var addVecF32x4: Self { BinaryenAddVecF32x4() }
  static var subVecF32x4: Self { BinaryenSubVecF32x4() }
  static var mulVecF32x4: Self { BinaryenMulVecF32x4() }
  static var divVecF32x4: Self { BinaryenDivVecF32x4() }
  static var minVecF32x4: Self { BinaryenMinVecF32x4() }
  static var maxVecF32x4: Self { BinaryenMaxVecF32x4() }
  static var pMinVecF32x4: Self { BinaryenPMinVecF32x4() }
  static var ceilVecF32x4: Self { BinaryenCeilVecF32x4() }
  static var floorVecF32x4: Self { BinaryenFloorVecF32x4() }
  static var truncVecF32x4: Self { BinaryenTruncVecF32x4() }
  static var nearestVecF32x4: Self { BinaryenNearestVecF32x4() }
  static var pMaxVecF32x4: Self { BinaryenPMaxVecF32x4() }
  static var absVecF64x2: Self { BinaryenAbsVecF64x2() }
  static var negVecF64x2: Self { BinaryenNegVecF64x2() }
  static var sqrtVecF64x2: Self { BinaryenSqrtVecF64x2() }
  static var qFMAVecF64x2: Self { BinaryenQFMAVecF64x2() }
  static var qFMSVecF64x2: Self { BinaryenQFMSVecF64x2() }
  static var addVecF64x2: Self { BinaryenAddVecF64x2() }
  static var subVecF64x2: Self { BinaryenSubVecF64x2() }
  static var mulVecF64x2: Self { BinaryenMulVecF64x2() }
  static var divVecF64x2: Self { BinaryenDivVecF64x2() }
  static var minVecF64x2: Self { BinaryenMinVecF64x2() }
  static var maxVecF64x2: Self { BinaryenMaxVecF64x2() }
  static var pMinVecF64x2: Self { BinaryenPMinVecF64x2() }
  static var pMaxVecF64x2: Self { BinaryenPMaxVecF64x2() }
  static var ceilVecF64x2: Self { BinaryenCeilVecF64x2() }
  static var floorVecF64x2: Self { BinaryenFloorVecF64x2() }
  static var truncVecF64x2: Self { BinaryenTruncVecF64x2() }
  static var nearestVecF64x2: Self { BinaryenNearestVecF64x2() }
  static var truncSatSVecF32x4ToVecI32x4: Self { BinaryenTruncSatSVecF32x4ToVecI32x4() }
  static var truncSatUVecF32x4ToVecI32x4: Self { BinaryenTruncSatUVecF32x4ToVecI32x4() }
  static var truncSatSVecF64x2ToVecI64x2: Self { BinaryenTruncSatSVecF64x2ToVecI64x2() }
  static var truncSatUVecF64x2ToVecI64x2: Self { BinaryenTruncSatUVecF64x2ToVecI64x2() }
  static var convertSVecI32x4ToVecF32x4: Self { BinaryenConvertSVecI32x4ToVecF32x4() }
  static var convertUVecI32x4ToVecF32x4: Self { BinaryenConvertUVecI32x4ToVecF32x4() }
  static var convertSVecI64x2ToVecF64x2: Self { BinaryenConvertSVecI64x2ToVecF64x2() }
  static var convertUVecI64x2ToVecF64x2: Self { BinaryenConvertUVecI64x2ToVecF64x2() }
  static var loadSplatVec8x16: Self { BinaryenLoadSplatVec8x16() }
  static var loadSplatVec16x8: Self { BinaryenLoadSplatVec16x8() }
  static var loadSplatVec32x4: Self { BinaryenLoadSplatVec32x4() }
  static var loadSplatVec64x2: Self { BinaryenLoadSplatVec64x2() }
  static var loadExtSVec8x8ToVecI16x8: Self { BinaryenLoadExtSVec8x8ToVecI16x8() }
  static var loadExtUVec8x8ToVecI16x8: Self { BinaryenLoadExtUVec8x8ToVecI16x8() }
  static var loadExtSVec16x4ToVecI32x4: Self { BinaryenLoadExtSVec16x4ToVecI32x4() }
  static var loadExtUVec16x4ToVecI32x4: Self { BinaryenLoadExtUVec16x4ToVecI32x4() }
  static var loadExtSVec32x2ToVecI64x2: Self { BinaryenLoadExtSVec32x2ToVecI64x2() }
  static var loadExtUVec32x2ToVecI64x2: Self { BinaryenLoadExtUVec32x2ToVecI64x2() }
  static var narrowSVecI16x8ToVecI8x16: Self { BinaryenNarrowSVecI16x8ToVecI8x16() }
  static var narrowUVecI16x8ToVecI8x16: Self { BinaryenNarrowUVecI16x8ToVecI8x16() }
  static var narrowSVecI32x4ToVecI16x8: Self { BinaryenNarrowSVecI32x4ToVecI16x8() }
  static var narrowUVecI32x4ToVecI16x8: Self { BinaryenNarrowUVecI32x4ToVecI16x8() }
  static var widenLowSVecI8x16ToVecI16x8: Self { BinaryenWidenLowSVecI8x16ToVecI16x8() }
  static var widenHighSVecI8x16ToVecI16x8: Self { BinaryenWidenHighSVecI8x16ToVecI16x8() }
  static var widenLowUVecI8x16ToVecI16x8: Self { BinaryenWidenLowUVecI8x16ToVecI16x8() }
  static var widenHighUVecI8x16ToVecI16x8: Self { BinaryenWidenHighUVecI8x16ToVecI16x8() }
  static var widenLowSVecI16x8ToVecI32x4: Self { BinaryenWidenLowSVecI16x8ToVecI32x4() }
  static var widenHighSVecI16x8ToVecI32x4: Self { BinaryenWidenHighSVecI16x8ToVecI32x4() }
  static var widenLowUVecI16x8ToVecI32x4: Self { BinaryenWidenLowUVecI16x8ToVecI32x4() }
  static var widenHighUVecI16x8ToVecI32x4: Self { BinaryenWidenHighUVecI16x8ToVecI32x4() }
  static var swizzleVec8x16: Self { BinaryenSwizzleVec8x16() }
}
